#!/usr/bin/env python

"""sanity_check

Usage:
    sanity_check <gulp_directory>

Arguments:
    gulp_directory      Directory where the Gulp-Files are located

"""
import os
import collections
from docopt import docopt

from gulpio.fileio import GulpDirectory

def check_meta_file_size_larger_zero(gulp_directory):
    result = []
    for chunk in gulp_directory.chunks():
        chunk_size = os.stat(chunk.meta_file_path).st_size
        if chunk_size == 0:
            result.append(chunk.meta_file_path)
    return result


def check_data_file_size_larger_zero(gulp_directory):
    result = []
    for chunk in gulp_directory.chunks():
        chunk_size = os.stat(chunk.data_file_path).st_size
        if chunk_size == 0:
            result.append(chunk.meta_file_path)
    return result


def check_data_file_size(gulp_directory):
    result = []
    for chunk in gulp_directory.chunks():
        last_frame_info = (chunk.meta_dict[next(reversed(chunk.meta_dict))]
                                          ['frame_info']
                                          [-1])
        data_file_size_from_meta = last_frame_info[0] + last_frame_info[2]
        data_file_size = os.stat(chunk.data_file_path).st_size
        if not data_file_size == data_file_size_from_meta:
            result.append(chunk.data_file_path)
    return result

def run_tests(gulp_directory):
    result = []
    for test in TESTS:
        test["occurences"] = test["check"](gulp_directory)
        result.append(test)
    return result


def extract_all_ids(gulp_directory):
    all_ids = []
    for chunk in gulp_directory.chunks():
        all_ids.extend(chunk.meta_dict.keys())
    return all_ids


def get_duplicate_entries(list_):
    c = collections.Counter(list_)
    return [i for i in c if c[i]>1]


def check_for_duplicate_ids(gulp_directory):
    return get_duplicate_entries(
        extract_all_ids(gulp_directory))


def check_for_failures(results):
    for result in results:
        print("Sanity Check: {}".format(result["message"]))
        if len(result["occurences"]):
            print("Test failed for: {}".format(result["occurences"]))
        else:
            print("Test passed")


TESTS = [
        {"message": "Check for empty meta files",
         "occurences": [],
         "check": check_meta_file_size_larger_zero},
        {"message": "Check for empty data files",
         "occurences": [],
         "check": check_data_file_size_larger_zero},
        {"message": "Check data file size equals size in meta file",
         "occurences": [],
         "check": check_data_file_size},
        {"message": "Check presence of duplicate ids",
         "occurences": [],
         "check": check_for_duplicate_ids},
        ]

if __name__ == '__main__':
    arguments = docopt(__doc__)
    results = []
    gulp_directory = GulpDirectory(arguments['<gulp_directory>'])
    results = run_tests(gulp_directory)
    check_for_failures(results)
